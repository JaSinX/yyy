from datetime import datetime
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select, and_, or_,func


import pytz
from aiogram.types import ContentType
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
import asyncio
from datetime import timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from sqlalchemy.ext.asyncio import AsyncSession
from database import Task,TaskStatus, Base
from aiogram.contrib.fsm_storage.memory import MemoryStorage

# from main import list_tasks_command,help_command,clean_chat_command

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.ext.asyncio import create_async_engine

API = "6323031981:AAG-Q8HsZG92b8D-yMA0Okcbwi7JN_29Oho"
bot = Bot(token=API)
storage = MemoryStorage()
# –≤—Ä–µ–º–µ–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—Ü–µ
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())


# –ö–æ–Ω–µ–∫—Ç –±–¥—â–∫–æ–π —Ç–∏–ø 
engine = create_async_engine("sqlite+aiosqlite:///TOSKA.db", echo=True)
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def create_tables():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

#–ú–ê—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class States(StatesGroup):
    WAITING_FOR_TASK = State()
    WAITING_FOR_TIME = State()

# –°—Ç–∞—Ä—Ç–∏–∫
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(types.KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"))
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –¥–æ—Ä–æ–≥–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n–≠—Ç–æ –±–æ—Ç ChronoEvent,—Ç—ã –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –∑–∞–¥–∞—á–∏, –∞ —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ –Ω–∏—Ö —Ç–µ–±–µ.\n –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=keyboard)
                                                    #—Ç—É—Ç –¥–æ–±–∞–≤—Ç—å –Ω—É–∂–Ω–æ –∏–º—è —é–∑–µ—Ä–∞ 

@dp.message_handler(Text(equals="–æ—Ç–º–µ–Ω–∞", ignore_case=True), state="*") 
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state() 
    if current_state is None:
        return
    await state.finish()
    await message.reply("""–•–æ—Ä–æ—à–æ –≤—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞\n\
"–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É". –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ "/help".""")


@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task(message: types.Message):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞—à—É –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞, –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    await States.WAITING_FOR_TASK.set()


# –•–µ–Ω–¥–ª–µ—Ä —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=ContentType.TEXT, state=States.WAITING_FOR_TASK)
async def handle_text(message: types.Message, state: FSMContext):
    await state.update_data(user_id=message.from_user.id, task_text=message.text, task_type="text")
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
    await States.WAITING_FOR_TIME.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

# –•–µ–Ω–¥–ª–µ—Ä –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=ContentType.VOICE, state=States.WAITING_FOR_TASK)
async def handle_voice(message: types.Message, state: FSMContext):
    await state.update_data(user_id=message.from_user.id, task_text=message.voice.file_id, task_type="voice")
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
    await States.WAITING_FOR_TIME.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

# –•–µ–Ω–¥–ª–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
@dp.message_handler(content_types=ContentType.PHOTO, state=States.WAITING_FOR_TASK)
async def handle_photo(message: types.Message, state: FSMContext):
    await state.update_data(user_id=message.from_user.id, task_text=message.photo[-1].file_id, task_type="image")
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
    await States.WAITING_FOR_TIME.set()  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏

# –•–µ–Ω–¥–ª–µ—Ä –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
@dp.message_handler(content_types=ContentType.TEXT, state=States.WAITING_FOR_TIME)
async def handle_time_input(message: types.Message, state: FSMContext):
    time_str = message.text
    try:
        #—Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC
        current_time_utc = datetime.now(pytz.utc)

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –≤ UTC
        user_timezone = pytz.timezone('Europe/Moscow')  
        time_obj = datetime.strptime(time_str, "%H:%M")
        time_obj = time_obj.replace(year=current_time_utc.year, month=current_time_utc.month, day=current_time_utc.day)
        time_obj = user_timezone.localize(time_obj)
        time_obj_utc = time_obj.astimezone(pytz.utc)

        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –∑–∞–¥–∞—á–∏ –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –Ω–∞  –æ–¥–∏–Ω –¥–µ–Ω—å
        if time_obj_utc <= current_time_utc:
            time_obj_utc += timedelta(days=1)

        user_data = await state.get_data()
        user_id = user_data.get('user_id')
        task_text = user_data.get('task_text')
        task_type = user_data.get('task_type')
        async with async_session() as session:
           

            new_task = Task(user_id=user_id, task_text=task_text, task_type=task_type, status=TaskStatus.ACTIVE, time=time_obj_utc)
            session.add(new_task)
            await session.commit()
            await bot.send_message(user_id, "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.")
            await state.finish()  
            await handle_expired_task(session, new_task)
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")


async def handle_expired_task(session, task):
    try:
        if task.status == TaskStatus.ACTIVE:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
            current_time_utc = datetime.utcnow().replace(tzinfo=None)
            task_time_utc = task.time.replace(tzinfo=None)
            if task_time_utc <= current_time_utc:
                inline_keyboard = types.InlineKeyboardMarkup()
                inline_keyboard.add(
                    types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–µ–Ω–æ üü¢", callback_data=f"complete_task:{task.id}"),
                    types.InlineKeyboardButton(text="–û—Ç–ª–æ–∂–∏—Ç—å ‚è≥", callback_data=f"delay_task:{task.id}"),
                    types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å üî¥", callback_data=f"skip_task:{task.id}")
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
                if task.status != TaskStatus.OVERDUE:
                    if task.task_type == "text":
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message = await bot.send_message(task.user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {task.task_text}", reply_markup=inline_keyboard)
                    elif task.task_type == "voice":
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        message = await bot.send_voice(task.user_id, task.task_text, reply_markup=inline_keyboard)
                    elif task.task_type == "image":
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                        message = await bot.send_photo(task.user_id, task.task_text, reply_markup=inline_keyboard)

                    await asyncio.sleep(30)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è

                    async with async_session() as delete_session:
                        await delete_session.delete(task)
                        await delete_session.commit()
                    
                    

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–µ—Ä–µ–¥ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ–º
                        if message.text:
                            await bot.delete_message(task.user_id, message.message_id)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", e)





# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –∑–æ–Ω–µ

async def check_tasks():
    while True:
        async with async_session() as session:
            current_time_utc = datetime.now(pytz.utc)

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏, —É—á–∏—Ç—ã–≤–∞—è –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏
            tasks = await session.execute(
                select(Task).where(
                    and_(
                        or_(
                            Task.status == TaskStatus.ACTIVE,
                            Task.status == TaskStatus.POSTPONED
                        ),
                        
                        
                        Task.time <= current_time_utc + timedelta(minutes=1)  
                    )
                )
            )
            for task in tasks.scalars():
                task_time_utc = task.time.replace(tzinfo=pytz.UTC)
                if task_time_utc <= current_time_utc:
                    print("–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞:", task.id, task.user_id, task.task_text, task.task_type, task.status, task.time)
# –û–Ω–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ª–∏—à—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –æ—Ç–ª–æ–∂–µ–Ω—ã–µ –∑–∞–¥–∞—á–∏–∫–∏
                    if task.status not in [TaskStatus.COMPLETED, TaskStatus.OVERDUE]:  
                        await handle_expired_task(session, task)

        await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞—á–∏ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É


async def send_reminder(session, task):
    try:
        current_time_utc = datetime.now(pytz.utc)


        task_time_utc = task.time.replace(tzinfo=pytz.utc)

        if task_time_utc <= current_time_utc and task.status != TaskStatus.OVERDUE:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏: –í—ã–ø–æ–ª–Ω–µ–Ω–æ, –û—Ç–ª–æ–∂–∏—Ç—å –∏ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            inline_keyboard = types.InlineKeyboardMarkup()
            inline_keyboard.add(
                types.InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æüü¢", callback_data=f"complete_task:{task.id}"),
                types.InlineKeyboardButton(text="–û—Ç–ª–æ–∂–∏—Ç—å‚è≥", callback_data=f"delay_task:{task.id}"),
                types.InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—åüî¥", callback_data=f"skip_task:{task.id}")
            )

            if task.task_type == "text":
                await bot.send_message(task.user_id, f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∑–∞–¥–∞—á–∏: {task.task_text}", reply_markup=inline_keyboard)
            elif task.task_type == "voice":
                await bot.send_voice(task.user_id, task.task_text, reply_markup=inline_keyboard)
            elif task.task_type == "image":
                await bot.send_photo(task.user_id, task.task_text, reply_markup=inline_keyboard)

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: %s", e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–≤–µ—Ä—à–∏—Ç—å"
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('complete_task'))
async def complete_task(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split(':')[1])  # –ü–æ–ª—É—á–∞–µ–º –∏–¥ –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    async with async_session() as session:
        task = await session.get(Task, task_id)
        if task:
            task.status = TaskStatus.COMPLETED
            await session.commit()
            await bot.answer_callback_query(callback_query.id, "–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ üü¢")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
        else:
            await bot.answer_callback_query(callback_query.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ª–æ–∂–∏—Ç—å"


async def schedule_message_deletion(task_id, chat_id, message_id):
    # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
    await asyncio.sleep(300)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
    try:
        await bot.delete_message(chat_id, message_id)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞: %s", e)
# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ª–æ–∂–∏—Ç—å"
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('delay_task'))
async def delay_task(callback_query: types.CallbackQuery, state: FSMContext):
    task_id = int(callback_query.data.split(':')[1])  # –ü–æ–ª—É—á–∞–µ–º –∏–¥ –∑–∞–¥–∞—á–∏ –∏–∑ callback_data

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton(text="1 –º–∏–Ω—É—Ç—É", callback_data=f"confirm_delay:{task_id}:1"),
        types.InlineKeyboardButton(text="15 –º–∏–Ω—É—Ç", callback_data=f"confirm_delay:{task_id}:15"),        
        types.InlineKeyboardButton(text="30 –º–∏–Ω—É—Ç", callback_data=f"confirm_delay:{task_id}:30"),
        types.InlineKeyboardButton(text="45 –º–∏–Ω—É—Ç", callback_data=f"confirm_delay:{task_id}:45"),
        types.InlineKeyboardButton(text="1 –¥–µ–Ω—å", callback_data=f"confirm_delay:{task_id}:1440")
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
    await bot.send_message(callback_query.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", reply_markup=keyboard)

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑–≤–∞–ª–æ callback_query
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
    await schedule_message_deletion(task_id, callback_query.message.chat.id, callback_query.message.message_id)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('confirm_delay'))
async def confirm_delay(callback_query: types.CallbackQuery):
    task_id, delay_minutes = map(int, callback_query.data.split(':')[1:])
    async with async_session() as session:
        task = await session.get(Task, task_id)
        if task:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤—Ä–µ–º–µ–Ω–∏ –∫ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–∞—á–∏
            task.time += timedelta(minutes=delay_minutes)
            await session.commit()
            await bot.answer_callback_query(callback_query.id, f"–ó–∞–¥–∞—á–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞ –Ω–∞ {delay_minutes} –º–∏–Ω—É—Ç")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑–≤–∞–ª–æ callback_query
            await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)
             # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
           
            await bot.answer_callback_query(callback_query.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

#–û–±–æ–±—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('skip_task'))
async def skip_task(callback_query: types.CallbackQuery):
    task_id = int(callback_query.data.split(':')[1])  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    async with async_session() as session:
        task = await session.get(Task, task_id)
        if task:
            task.status = TaskStatus.OVERDUE 
            await session.commit()
            await bot.answer_callback_query(callback_query.id, "–ó–∞–¥–∞—á–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞ üî¥")
        else:
            await bot.answer_callback_query(callback_query.id, "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")


# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /help
@dp.message_handler(commands=['help'])
# –Ω—É–∂–Ω–æ –ø–æ–¥—É–º–∞—Ç—å –µ—â–µ –∏ –æ—Ç–º–µ–Ω—É —Ç–∏–ø–æ , —ç—Ç–æ –Ω—É–∂–Ω–æ —Å—Ç—ã—Ä–∏—Ç—å –∏–∑ –ø–∏—Ü—Ü—ã






# "–°–¢–ê–¢–ò–°–¢–ò–ö–ê"
@dp.message_handler(commands=['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
async def statistics_command(message: types.Message):
    async with async_session() as session:
        user_id = message.from_user.id
        today = datetime.now().date()

        #  —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞—á –∏ —é–∑–µ—Ä—É –∑–∞ —Å–µ–æ–¥–Ω—è—â–Ω–∏–π –¥–µ–Ω–µ–∫
        total_tasks_today = await session.scalar(select(func.count(Task.id)).filter(
            Task.user_id == user_id,
            Task.time >= today,  # –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            Task.time < today + timedelta(days=1)  # –ó–∞–¥–∞—á–∏ –¥–æ –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        ))
# –Ω—É–∂–Ω–æ —ç—Ç–æ –≤–Ω–æ—Å–∏—Ç—å –ª–∏–±–æ –≤ –∏–Ω–ª–∞–π–Ω –º–µ–Ω—é —Ç–∏–ø–æ –∏–ª–∏ —Ö–∑ –Ω–æ 
# –µ—â–µ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–∫ —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é\–º–µ—Å—è—Ü 
# —ç—Ç–æ –∏–¥–µ—è 50 –Ω–∞ 50 —Ö–º...
        completed_tasks_today = await session.scalar(select(func.count(Task.id)).filter(
            Task.user_id == user_id,
            Task.status == TaskStatus.COMPLETED,
            Task.time >= today,
            Task.time < today + timedelta(days=1)
        ))

        overdue_tasks_today = await session.scalar(select(func.count(Task.id)).filter(
            Task.user_id == user_id,
            Task.status == TaskStatus.OVERDUE,
            Task.time >= today,
            Task.time < today + timedelta(days=1)
        ))

        active_tasks_today = await session.scalar(select(func.count(Task.id)).filter(
            Task.user_id == user_id,
            Task.status == TaskStatus.ACTIVE,
            Task.time >= today,
            Task.time < today + timedelta(days=1)
        ))

        postponed_tasks_today = await session.scalar(select(func.count(Task.id)).filter(
            Task.user_id == user_id,
            Task.status == TaskStatus.POSTPONED,
            Task.time >= today,
            Task.time < today + timedelta(days=1)
        ))

        # —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ
        completed_percentage_today = (completed_tasks_today / total_tasks_today) * 100 if total_tasks_today > 0 else 0
        overdue_percentage_today = (overdue_tasks_today / total_tasks_today) * 100 if total_tasks_today > 0 else 0
        active_percentage_today = (active_tasks_today / total_tasks_today) * 100 if total_tasks_today > 0 else 0
        postponed_percentage_today = (postponed_tasks_today / total_tasks_today) * 100 if total_tasks_today > 0 else 0

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –°–¢–ê–¢–°–¢–ò–ö–£ —é–∑–µ—Ä—É
        await message.answer(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á –∑–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):\n"
                             f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_percentage_today:.2f}%\n"
                             f"–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ: {overdue_percentage_today:.2f}%\n"
                             f"–ê–∫—Ç–∏–≤–Ω—ã–µ: {active_percentage_today:.2f}%\n"
                             f"–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ: {postponed_percentage_today:.2f}%")
# –∏—å–±–∞—Ç—å –æ–Ω–æ —Ä–∞–±–æ–∞–µ—Ç —Å–∫–∞ –£–†–ê –ö–ê–ü–° –º–æ–∂–Ω–æ –µ—â–µ –ø–∞—Ä—É –∫–∞—Ç–æ–∫ —Å—ã–≥—Ä–∞—Ç—å



async def check_tasks_periodically():
    while True:
        await asyncio.sleep(60)  # –°–ø–∏–º 60 —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
        await check_tasks()
# —Ä–µ–≥–∞–µ–∏ —Ä–µ–≥–∞–µ–º 
from  aiogram.utils import executor #
#  –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏ –ø–æ—Å—Ç–æ –ø–µ—Ä–µ–±—Ä–∞—Ç—å —Å for –∏ —Ä–µ–≥–∞—Ç—å 
async def main():
    await create_tables()
    dp.register_message_handler(start_command, commands=['start'])
    dp.register_message_handler(add_task, lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
    dp.register_message_handler(handle_text, content_types=ContentType.TEXT, state=States.WAITING_FOR_TASK)
    dp.register_message_handler(handle_voice, content_types=ContentType.VOICE, state=States.WAITING_FOR_TASK)
    dp.register_message_handler(handle_photo, content_types=ContentType.PHOTO, state=States.WAITING_FOR_TASK)
    dp.register_message_handler(statistics_command,commands=['—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'])
    dp.register_message_handler(cancel_handler,Text(equals= "–æ—Ç–º–µ–Ω–∞",ignore_case = True),state="*")
    dp.register_message_handler(handle_time_input, content_types=ContentType.TEXT, state=States.WAITING_FOR_TIME)
    asyncio.create_task(check_tasks_periodically())  # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–¥–∞—á

if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    executor.start_polling(dp, skip_updates=True)